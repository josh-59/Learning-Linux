The Unix Architecture
  - Drivers
  - Kernel
  - System Call API
  - Standard "Core" utilities

Drivers:
The lowest elements of the operating system interact
directly with hardware, and are known as <em>hardware drivers</em>.

System Call API:
The operating system exposes a system call interface to each
user-space process, allowing a process to instruct the kernel to carry out
actions on its behalf.
  - POSIX / SUSv4
  - #?

"Because programs are independent of the underlying hardware, it is easy
to move them between UNIX systems running on different hardware if the programs
do not make assumptions about the underlying hardware." (Bach, 5) [The Design of the Unix Operating System]

Kernel:
Between these two elements is the kernel.

What is a kernel?
    - A key component of the OS
    - Began by Linus Torvals, the Linux Kernel

The kernel is the software layer between user-space programs and hardware drivers.
This is the largest software layer in the operating system construct; it is
tasked with maintaining the filesystem, ensuring user-space processes do not
interfere with each other, and scheduling processes in a fair and reasonable manner.

A great number of kernels implement the Unix system-call API,

"Core" Utilites:
The standard collection of programs that help define the working "Linux" OS;
Some of these are critical to operating system functionality (?? Examples ??)
  - GNU


Bundling It All Up: The Distribution
  An operating system, precompiled for use.
  It includes a kernel, selected drivers, and selected utilities.

  Because Linux is open-source, it's relatively easy to produce your own distribution,
  and because it's free, anyone can do it.


What will run Linux?
  - Just about anything!
  Pinebook Pro:
   a compelling alternative to mid-ranged Chromebooks that people convert into Linux laptops.
