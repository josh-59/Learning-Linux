Overarching Goal:
	<em> Learning Linux </em>
	A book-like covering the persistent concepts of Linux, for the
	new user.


1)  Operating Systems
	a) What's an OS
	b) Why Linux
		<em>Superlative</em> programming environment:  Why this makes sense
	c) Distros
		Think of these as flavors of Linux; they mostly share the GNU/Linux
		kernel / coreutils fundamentals, the same ethos (make small tools and make them well),
		the same open-ness

3)  Files and Filesystems
4)  Processes
4)  The Command Line
2)  Package Managers -> Up-front and center!
7)  Text Terminals-> Rewrite?
8)	Finding Files
6)	An Introduction to Vim
9)  Learning Linux
11) Going Further: Programming in Linux
	a) The Importance of C
	b) Rust?
	c) Command-line tools vs. Scripting Language
		Set of wrenches vs ratchet set

	https://www.youtube.com/watch?v=VetI2lr2LNA&list=RDMMCCY0bAPLZ1w&index=27


Improvements:
	For the love of god, make regex a virtual package!
	Then programers can reference whichever engine is installed, and
	users can choose their engine by installing the appropriate package -> Unify regex across systems.

	Printers and Scanners

	Preload common applications:
		With modern desktops having an overabundance of RAM, allow the user to
		specify some applications' text data segment to be preloaded into memory,
		until the kernel begins to run out of memory.
		Then distribution creators could implement a tool to allow the user to modify this
		list (and/or base it on history).

Use Lbry's framework to make scholarly publications available freely (and searchable).
